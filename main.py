@app.post("/")
async def webhook(request: Request):
    try:
        body = (await request.body()).decode("utf-8")
        print("üì• –°—ã—Ä–æ–π JSON:", body)

        try:
            data = json.loads(body)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
            return {"error": "Invalid JSON", "details": str(e)}

        print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª:", data)

        symbol = data.get("symbol", "").upper()
        side = data.get("side", "").upper()
        qty = float(data.get("qty", 10))
        leverage = int(data.get("leverage", 10))

        if not symbol or side not in ["BUY", "SELL"]:
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–∞"}

        current_position = get_position(symbol)
        if current_position == "Buy" and side == "SELL":
            print("üîÅ –ó–∞–∫—Ä—ã–≤–∞–µ–º Buy ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º Sell")
            close_position(symbol, "Buy")
        elif current_position == "Sell" and side == "BUY":
            print("üîÅ –ó–∞–∫—Ä—ã–≤–∞–µ–º Sell ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º Buy")
            close_position(symbol, "Sell")

        result = place_market_order(symbol, side, qty)
        print("üì§ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", result)
        return {"status": "success", "details": result}

    except Exception as e:
        print("üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", str(e))
        return {"error": "Internal Server Error", "details": str(e)}
